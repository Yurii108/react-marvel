{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","ComicsList","useState","comicList","setComicList","offsetComic","setOffsetComic","setNewItemLoading","comicEnded","setComicEnded","useMarvelService","getAllComics","setProcess","useEffect","onRequest","initial","then","onComicListLoaded","newComicList","ended","length","className","arr","items","map","item","i","to","id","src","thumbnail","alt","title","price","renderItems","disabled","onClick","style","ComicsPage","Helmet","name","content","AppBanner","display","width","height","objectFit","margin","img","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","data","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","_transformCharacter","getCharacter","_transformComics","getComic","getCharacterByName","comic","description","pageCount","prices","path","extension","homepage","urls","language","textObjects","char","slice","wiki","comics","avengers","avengersLogo"],"mappings":"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","file":"static/js/7.602549e6.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />\n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />\n        case 'confirmed':\n            return <Component />\n        case 'error':\n            return <ErrorMessage />\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n\n    const [comicList, setComicList] = useState([]);\n    const [offsetComic, setOffsetComic] = useState(100);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [comicEnded, setComicEnded] = useState(false);\n\n    const { getAllComics, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offsetComic, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offsetComic, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offsetComic)\n            .then(onComicListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onComicListLoaded = (newComicList) => {\n\n        let ended = false;\n        if (newComicList.length < 8) {\n            ended = true;\n        }\n\n        setComicList(comicList => [...comicList, ...newComicList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffsetComic(offsetComic => offsetComic + 8);\n        setComicEnded(comicEnded => ended);\n    }\n\n    const renderItems = (arr) => {\n        const items = arr.map((item, i) => {\n            return (\n                <li key={i} className=\"comics__item\">\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" />\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price} $</div>\n                    </Link>\n                </li>\n            )\n        })\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"comics__list\">\n             { setContent(process, () => renderItems(comicList), newItemLoading)}\n            <button\n                disabled={newItemLoading}\n                onClick={() => onRequest(offsetComic)}\n                className=\"button button__main button__long\"\n                style={{ 'display': comicEnded ? 'none' : 'block' }}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\n\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\"\r\n                />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt='Error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=9305bd22b8ae7e61414ce4f36b73001e';\r\n    const _baseOffset = '315';\r\n    const _offsetComic = '444';\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}/characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}/characters/${id}?${_apiKey}`)\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offsetComic = _offsetComic) => {\r\n        const res = await request(`${_apiBase}/comics?limit=8&offset=${offsetComic}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}/comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n            price: comic.prices[0].price,\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            homepage: comic.urls[0].url,\r\n            language: comic.textObjects.language || 'en-us',\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 230)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {\r\n        clearError,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getComic,\r\n        getAllComics,\r\n        getCharacterByName,\r\n        process,\r\n        setProcess\r\n    }\r\n}\r\n\r\nexport default useMarvelService;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url} status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n\r\n        } catch (e) {\r\n\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess }\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}