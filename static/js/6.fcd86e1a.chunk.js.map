{"version":3,"sources":["components/pages/SinglePage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["SinglePage","Component","dataType","id","useParams","useState","data","setData","useMarvelService","getComic","getCharacter","clearError","process","setProcess","useEffect","updateData","then","onDataLoaded","setContent","ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getAllComics","offsetComic","_transformComics","getCharacterByName","name","comic","title","description","pageCount","price","prices","thumbnail","path","extension","homepage","urls","language","textObjects","char","slice","wiki","comics","items","Skeleton","className","Spinner","AppBanner","avengers","avengersLogo"],"mappings":"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","file":"static/js/6.fcd86e1a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport setContent from '../../utils/setContent';\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n    const { id } = useParams();\r\n    const [data, setData] = useState(null);\r\n    const { getComic, getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n        // eslint-disable-next-line\r\n    }, [id]);\r\n\r\n    const updateData = () => {\r\n        clearError();\r\n        // eslint-disable-next-line\r\n        switch (dataType) {\r\n            case 'comic':\r\n                getComic(id).then(onDataLoaded).then(() => setProcess('confirmed'))\r\n                break;\r\n            case 'character':\r\n                getCharacter(id).then(onDataLoaded).then(() => setProcess('confirmed'))\r\n        }\r\n    }\r\n\r\n    const onDataLoaded = (data) => {\r\n        setData(data);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            {setContent(process, Component, data)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SinglePage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt='Error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=9305bd22b8ae7e61414ce4f36b73001e';\r\n    const _baseOffset = '315';\r\n    const _offsetComic = '444';\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}/characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}/characters/${id}?${_apiKey}`)\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offsetComic = _offsetComic) => {\r\n        const res = await request(`${_apiBase}/comics?limit=8&offset=${offsetComic}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}/comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n            price: comic.prices[0].price,\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            homepage: comic.urls[0].url,\r\n            language: comic.textObjects.language || 'en-us',\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 230)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {\r\n        clearError,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getComic,\r\n        getAllComics,\r\n        getCharacterByName,\r\n        process,\r\n        setProcess\r\n    }\r\n}\r\n\r\nexport default useMarvelService;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url} status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n\r\n        } catch (e) {\r\n\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess }\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton />\r\n        case 'loading':\r\n            return <Spinner />\r\n        case 'confirmed':\r\n            return <Component data={data} />\r\n        case 'error':\r\n            return <ErrorMessage />\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}