{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","objectFit","className","src","style","alt","href","RandomChar","useState","char","setChar","useMarvelService","clearError","getCharacter","process","setProcess","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","e","key","TransitionGroup","component","renderItems","disabled","comics","CharInfo","top","setTop","charId","document","addEventListener","scrollHandler","removeEventListener","target","documentElement","scrollTop","mySecondRef","position","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","CharSearchForm","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","Helmet","content","decoration","display","width","height","margin","img","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","offsetComic","_transformComics","getComic","comic","title","pageCount","price","prices","path","extension","urls","language","textObjects","slice","Skeleton"],"mappings":"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","file":"static/js/5.c8c88e9a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useEffect, useState } from 'react';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({});\r\n\r\n    const { clearError, getCharacter, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className=\"button button__main\">\r\n                    <div className=\"inner\" onClick={updateChar} >try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({ data }) => {\r\n    const { name, description, thumbnail, homepage, wiki } = data;\r\n\r\n    const http = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\r\n    const objectFit = thumbnail === http ? { 'objectFit': 'fill' } : null;\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} style={objectFit} alt=\"Random character\" className=\"randomchar__img\" />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner />\r\n        case 'loading':\r\n            return newItemLoading ? <Component /> : <Spinner />\r\n        case 'confirmed':\r\n            return <Component />\r\n        case 'error':\r\n            return <ErrorMessage />\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(315);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { getAllCharacters, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n\r\n    let itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    const renderItems = (arr) => {\r\n        const items = arr.map((item, i) => {\r\n            const http = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\r\n            let objectFit = item.thumbnail === http ? { 'objectFit': 'fill' } : null;\r\n\r\n            return (\r\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\r\n                    <li className=\"char__item\"\r\n                        tabIndex={0}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        onClick={() => {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }}>\r\n                        onKeyPress={(e) => {\r\n                            if (e.key === ' ' || e.key === 'Enter') {\r\n                                props.onCharSelected(item.id);\r\n                                focusOnItem(i);\r\n                            }\r\n                        }}\r\n                        <img src={item.thumbnail} alt={item.name} style={objectFit} />\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const elements = useMemo(() => {\r\n       return setContent(process, () => renderItems(charList), newItemLoading);\r\n       // eslint-disable-next-line\r\n    }, [process])\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                onClick={() => onRequest(offset)}\r\n                style={{ 'display': charEnded ? 'none' : 'block' }}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    const [top, setTop] = useState(0);\r\n\r\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n        // eslint-disable-next-line\r\n    }, [props.charId]);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"scroll\", scrollHandler)\r\n\r\n        return function () {\r\n            document.removeEventListener(\"scroll\", scrollHandler)\r\n        }\r\n    }, [])\r\n\r\n    const scrollHandler = (e) => {\r\n        setTop(e.target.documentElement.scrollTop)\r\n    }\r\n\r\n    const updateChar = () => {\r\n        const { charId } = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const mySecondRef = useRef();\r\n\r\n    return (\r\n        <div className=\"char__info\" ref={mySecondRef} style={top >= 600 ? { position: \"absolute\", top: `${top - 146}px` } : {}}>\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({ data }) => {\r\n    const { name, thumbnail, description, homepage, wiki, comics } = data;\r\n    const http = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\r\n    let objectFit = thumbnail === http ? { 'objectFit': 'fill' } : null;\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={objectFit} />\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics with this character'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        // eslint-disable-next-line\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { Component } from \"react/cjs/react.development\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {\r\n    //     return { error: true };\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary; ","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt='Error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=9305bd22b8ae7e61414ce4f36b73001e';\r\n    const _baseOffset = '315';\r\n    const _offsetComic = '444';\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}/characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}/characters/${id}?${_apiKey}`)\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offsetComic = _offsetComic) => {\r\n        const res = await request(`${_apiBase}/comics?limit=8&offset=${offsetComic}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}/comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n            price: comic.prices[0].price,\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            homepage: comic.urls[0].url,\r\n            language: comic.textObjects.language || 'en-us',\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 230)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {\r\n        clearError,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getComic,\r\n        getAllComics,\r\n        getCharacterByName,\r\n        process,\r\n        setProcess\r\n    }\r\n}\r\n\r\nexport default useMarvelService;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url} status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n\r\n        } catch (e) {\r\n\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess }\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton />\r\n        case 'loading':\r\n            return <Spinner />\r\n        case 'confirmed':\r\n            return <Component data={data} />\r\n        case 'error':\r\n            return <ErrorMessage />\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"sourceRoot":""}